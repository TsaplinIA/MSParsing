# mafia_parser/spiders/mafia.py
import scrapy
import re
import json
import os
import glob
from datetime import datetime


class MafiaSpider(scrapy.Spider):
    name = 'mafia'
    start_urls = ['https://mafiastyle.pythonanywhere.com/']

    # –õ–µ–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ª–∞–±–æ–≥–æ VPS
    custom_settings = {
        'DOWNLOAD_DELAY': 3,
        'CONCURRENT_REQUESTS': 1,
        'CONCURRENT_REQUESTS_PER_DOMAIN': 1,
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—É—Å–∫
    }

    def parse(self, response):
        rows = response.css('table.leaderboard tbody tr')[:3]

        top3 = []
        for i, row in enumerate(rows, 1):
            nickname_raw = row.css('td:nth-child(2) a::text').get()
            rating_raw = row.css('td:nth-child(3)::text').get()

            if nickname_raw and rating_raw:
                nickname = re.sub(r'[üëë‚ö°üî•]', '', nickname_raw).strip()
                rating = float(rating_raw.strip())

                player = {
                    'name': nickname,
                    'score': str(rating)
                }

                top3.append(player)
                yield player

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ top3)
        with open('/data/latest.json', 'w', encoding='utf-8') as f:
            json.dump(top3, f, ensure_ascii=False, indent=2)

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        self.archive_if_changed(top3)

        self.logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(top3)} –∏–≥—Ä–æ–∫–æ–≤")

    def archive_if_changed(self, current_top3):
        """–°–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å"""
        try:
            self.logger.info("üóÉÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
            files = glob.glob('/data/archive_*.json')
            self.logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(files)}")

            if files:
                latest_archive = max(files, key=os.path.getctime)
                self.logger.info(f"üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä—Ö–∏–≤: {os.path.basename(latest_archive)}")

                with open(latest_archive, 'r', encoding='utf-8') as f:
                    last_data = json.load(f)

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ø-3
                if last_data == current_top3:
                    self.logger.info("üîÑ –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∞—Ä—Ö–∏–≤ –Ω–µ —Å–æ–∑–¥–∞–µ–º")
                    return
                else:
                    self.logger.info("üÜï –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞—Ä—Ö–∏–≤")
            else:
                self.logger.info("üìÅ –ê—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π")

            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª —Å timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M')
            archive_file = f'/data/archive_{timestamp}.json'

            with open(archive_file, 'w', encoding='utf-8') as f:
                json.dump(current_top3, f, ensure_ascii=False, indent=2)

            self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–≤: {os.path.basename(archive_file)}")

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30)
            self.cleanup_old_archives()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")

    def cleanup_old_archives(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30"""
        try:
            files = glob.glob('/data/archive_*.json')
            self.logger.info(f"üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤: {len(files)} —Ñ–∞–π–ª–æ–≤")

            if len(files) > 30:
                files.sort(key=os.path.getctime)
                to_delete = files[:-30]

                for old_file in to_delete:
                    os.remove(old_file)
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {os.path.basename(old_file)}")

                self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(to_delete)} —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤")
            else:
                self.logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞—Ä—Ö–∏–≤–æ–≤: {e}")
            import traceback
            self.logger.error(f"üìã Traceback: {traceback.format_exc()}")

    def cleanup_old_files(self):
        """–ú–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - —É–¥–∞–ª–µ–Ω"""
        pass