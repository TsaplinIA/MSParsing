# Makefile
.PHONY: start stop logs test status monitor

start:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞..."
	docker compose up -d
	@echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É."

stop:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞..."
	docker compose down

logs:
	docker compose logs -f

# –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
logs-all:
	@echo "üìã Cron –ª–æ–≥–∏:"
	@docker compose exec mafia-parser tail -20 /var/log/cron.log 2>/dev/null || echo "‚ùå Cron –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
	@echo ""
	@echo "üìã Scrapy –ª–æ–≥–∏:"
	@docker compose exec mafia-parser tail -20 /var/log/scrapy.log 2>/dev/null || echo "‚ùå Scrapy –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
	@echo ""
	@echo "üìã –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏:"
	@docker compose exec mafia-parser tail -20 /var/log/test.log 2>/dev/null || echo "‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

# –¢–æ–ª—å–∫–æ cron –ª–æ–≥–∏
logs-cron:
	docker compose exec mafia-parser tail -f /var/log/cron.log

# –¢–µ—Å—Ç (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫)
test:
	@echo "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫..."
	docker run --rm -v $(PWD)/data:/data -w /app \
		python:3.9-alpine sh -c \
		"pip install scrapy && \
		 scrapy crawl mafia"

# –°—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
status:
	@echo "üìä Mafia Parser Status"
	@echo "======================"
	@if docker compose ps -q mafia-parser | grep -q .; then \
		echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –ó–ê–ü–£–©–ï–ù"; \
		echo "üîÑ –°—Ç–∞—Ç—É—Å: $(docker compose ps mafia-parser --format 'table {{.State}}' | tail -1)"; \
		echo "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: $(docker inspect mafia-parser --format '{{.State.StartedAt}}' 2>/dev/null | cut -d'T' -f2 | cut -d'.' -f1)"; \
	else \
		echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä: –û–°–¢–ê–ù–û–í–õ–ï–ù"; \
	fi
	@echo ""
	@echo "üìÅ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö: $(ls -1 ./data/*.json 2>/dev/null | wc -l) —Ñ–∞–π–ª–æ–≤"
	@echo "üíæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: $(du -sh ./data 2>/dev/null | cut -f1)"
	@echo ""
	@echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:"
	@if [ -f ./data/latest.json ]; then \
		echo "   –í—Ä–µ–º—è: $(cat ./data/latest.json | python3 -c "import sys,json; print(json.load(sys.stdin)['timestamp'])" 2>/dev/null)"; \
		cat ./data/latest.json | python3 -c "import sys,json; [print(f\"   {p['position']}. {p['nickname']} - {p['rating']}\") for p in json.load(sys.stdin)['top3']]" 2>/dev/null; \
	else \
		echo "‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"; \
	fi

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
monitor:
	@echo "üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:"
	@du -sh ./data
	@echo ""
	@echo "üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:"
	@ls -la ./data | wc -l
	@echo ""
	@echo "üê≥ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
	@docker stats mafia-parser --no-stream

# –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—É–∫–∞
run:
	docker compose exec mafia-parser scrapy crawl mafia

# –û—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞—Ä—Ö–∏–≤–æ–≤)
clean:
	@echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤..."
	@find ./data -name "archive_*.json" -type f | head -n -10 | xargs rm -f
	@echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
clean-all:
	rm -rf ./data/*
	docker compose down -v